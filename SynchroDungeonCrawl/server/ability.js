/**
 * Ability: Used by a Unit, this generates Actions. Each ability is a singleton
 * in the databse of abilities; this class is abstract.
 * uid: string, an identifier which is unique among all Abilities
 * name: string, the name of the Ability.
 * keywords: additional arbitrary data assocated with the Ability
 * params: {string: arbitrary}, any additional member data, typically descriptions.
 *     Descriptive format strings in this class may access "this", "owner", and "plo".
 *   describeCondition: format string for describing conditions under which this
 *       Ability may be used.
 *   describeBlurb: format string for describing this Ability in short form.
 *   describeAbility: format string for descriving this Ability in long form.
 */
function Ability(name, uid, keywords, params) {
  for (key in params) {
    this[key] = params[key];
  }
  this.name = name;
  this.uid = uid;
  this.keywords = (typeof keywords === "undefined") ? {} : keywords;
}

/**
 * Returns whether or not the ability can be used. This covers criteria
 * other than cost. If not overridden, always true.
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner.
 * returns: bool
 */
Ability.prototype.getUsable = function(bat, ownerUID, plo) {
  return true;
}

/**
 * Returns the resource cost of the ability.If not overridden, zero.
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner.
 * returns: {string resourceName: number}
 */
Ability.prototype.getCost = function(bat, ownerUID, plo) {
  return {};
}

/**
 * Returns the default PLO for a new learned instance of this ability.
 * If not overridden, {}.
 * returns: PLO
 */
Ability.prototype.getBasicPLO = function() {
  return {};
}

/** 
 * Returns the Coordinates that can be targeted by this ability.
 * If not overridden, [].
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner.
 * returns: [Coordinates]
 */
 Ability.prototype.getTargetCoordinates(bat, ownerUID, plo) {
   return [];
 }
 
 /** 
  * Returns the Coordinates affected by this ability, given a list of target Coordinates.
  * If not overridden, []. The target Coordinates are NOT checked for validity.
  * bat: Battle, the battle.
  * ownerUID: UID, the unit trying to use the ability.
  * plo: PLO, the power level object for the owner.
  * targets: [Coordinates]
  * returns: [Coordinates]
  */
 Ability.prototype.getAffectedCoordinates(bat, ownerUID, plo, targets) {
   return [];
 }
 
 /**
  * Creates and enqueues the Actions generated by using this ability, given a list
  * of affected Coordinates.
  * If not overridden, []. The affected Coordinates are NOT checked for validity.
  * bat: Battle, the battle.
  * ownerUID: UID, the unit trying to use the ability.
  * plo: PLO, the power level object for the owner.
  * affected: [Coordinates]
  * returns: [Action]
  */
  Ability.prototype.createActions(bat, ownerUID, plo, targets) {
    return [];
  }
  
/**
 * Code to execute on battle setup. Cannot generate actions, but may, for example,
 * install the ability as an active ability. If not overridden, does nothing.
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner. 
 */
Ability.prototype.onBattleSetup(bat, ownerUID, plo) {
  // Shhh.
}

/**
 * Code to execute after battle setup, just before the first round.
 * Returns [Action], typically to create Effects. If not overridden, [].
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner. 
 * returns 
 */
Ability.prototype.onBattleStart(bat, ownerUID, plo) {
  return [];
}  
  
/**
 * Code to execute at the end of battle. If not overridden, does nothing.
 * bat: Battle, the battle.
 * ownerUID: UID, the unit trying to use the ability.
 * plo: PLO, the power level object for the owner. 
 */
Ability.prototype.onBattleTeardown(bat, ownerUID, plo) {
  // Nope.
}  
exports.Ability = Ability;
